% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{forecast_pipeline}
\alias{forecast_pipeline}
\title{Pipeline to produce a forecast}
\usage{
forecast_pipeline(method = "ts", source = "jhu",
  granularity = "national", horizon = 4, force = FALSE, ...)
}
\arguments{
\item{method}{Forecasting method to use; currently only \code{'ts'} (time series) is supported}

\item{source}{Data source to query; must be one of \code{'jhu'} or \code{'nyt'}; default is \code{'jhu'}}

\item{granularity}{Data aggregation level; must be one of \code{'national'}, \code{'state'}, or \code{'county'}; if data source is \code{'nyt'} then only \code{'national'} can be used currently; default is \code{'national'}}

\item{horizon}{Horizon periods through which the forecasts should be generated; default is \code{4}}

\item{force}{Logical -- force the pipeline to run even if it isn't Monday? (default is \code{FALSE}; changing to \code{TRUE} may break something if today isn't Monday).}

\item{...}{Arguments passed to other functions}
}
\description{
\lifecycle{experimental}

Runs the pipeline with reasonable defaults and some hard-coded values to do the following. See the Examples. For now this function only works on Mondays!
\enumerate{
\item Get data (national level from JHU by default)
\item Fit incident case and incident death models (ARIMA and lagged TSLM respectively)
\item Get future case data to create the incident death forecast
\item Create the incident death forecast based on this new data
\item Prepare submission format
\item Suggest a submission filename
\item Return all resulting objects to a list.
}
}
\examples{
\dontrun{
# Run all the steps to create models and forecasts
myforecast <- forecast_pipeline()
# Look at the submission and the suggested filename.
myforecast$submission
myforecast$submission_filename
# Write submission to file
readr::write_csv(myforecast$submission, file=myforecast$submission_filename)
# Validate submission
validate_forecast(myforecast$submission_filename)
}
}
